import asyncio
import logging
from aiogram import Bot
from dotenv import load_dotenv
import os
from datetime import datetime, timezone
# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# Telegram-–±–æ—Ç
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
anomaly_count = 0
max_alerts = 2

async def send_fake_anomaly():
    global anomaly_count

    anomaly_query = "DROP DATABASE testdb;"
    user = "user"
    database = "postgres"

    while anomaly_count < max_alerts:
        timestamp = datetime.now(timezone.utc).isoformat()

        message = (
            f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è!\n\n"
            f"‚è± –í—Ä–µ–º—è: {timestamp}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}\n"
            f"üóÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database}\n"
            f"üìÑ –ó–∞–ø—Ä–æ—Å: {anomaly_query}"
        )

        logger.warning(
            f"–ê–Ω–æ–º–∞–ª–∏—è ‚Ññ{anomaly_count + 1}: {anomaly_query}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}, –ë–î: {database}, –≤—Ä–µ–º—è: {timestamp}"
        )

        try:
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

        anomaly_count += 1
        await asyncio.sleep(20)  # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ

    logger.info("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


if __name__ == "__main__":
    asyncio.run(send_fake_anomaly())