import os
from elasticsearch import Elasticsearch
from aiogram import Bot, types
import pandas as pd
from sklearn.ensemble import IsolationForest
import re
import asyncio

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ELASTICSEARCH_HOST = os.getenv('ELASTICSEARCH_HOST', 'elasticsearch')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch
es = Elasticsearch([f'http://{ELASTICSEARCH_HOST}:9200'])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –®–∞–±–ª–æ–Ω—ã –æ–ø–∞—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
DANGEROUS_PATTERNS = [
    r'drop\s+database',
    r'truncate\s+table',
    r'delete\s+from\s+\w+\s*(?!where)',
    r'alter\s+table\s+\w+\s+drop',
    r';\s*--',
    r'1\s*=\s*1',
    r'union\s+select',
    r'insert\s+into\s+\w+\s+values',
    r'update\s+\w+\s+set\s+\w+\s*=\s*\w+\s*(?!where)'
]


def check_dangerous_queries(query):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    query_lower = query.lower()
    for pattern in DANGEROUS_PATTERNS:
        if re.search(pattern, query_lower):
            return True, pattern
    return False, None


async def send_alert(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)


async def monitor_logs():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π"""
    last_checked_time = None

    while True:
        try:
            # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤
            query = {
                "query": {
                    "range": {
                        "@timestamp": {
                            "gt": last_checked_time.isoformat() if last_checked_time else "now-1m"
                        }
                    }
                },
                "size": 100,
                "sort": [{"@timestamp": "asc"}]
            }

            res = es.search(index="postgresql-logs-*", body=query)

            if res['hits']['hits']:
                last_checked_time = pd.to_datetime(res['hits']['hits'][-1]['_source']['@timestamp'])

                for hit in res['hits']['hits']:
                    source = hit['_source']
                    query_text = source.get('query', '')

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                    is_dangerous, pattern = check_dangerous_queries(query_text)
                    if is_dangerous:
                        alert_msg = (
                            f"‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω!\n"
                            f"üïí –í—Ä–µ–º—è: {source['@timestamp']}\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {source.get('user', 'N/A')}\n"
                            f"üìù –ó–∞–ø—Ä–æ—Å: {query_text[:500]}...\n"
                            f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω: {pattern}\n"
                            f"‚ùóÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
                        )
                        await send_alert(alert_msg)

                        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!!! –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ª–æ–≥–æ–≤: {str(e)}"
            await send_alert(error_msg)
            print(error_msg)

        await asyncio.sleep(30)


if __name__ == "__main__":
    asyncio.run(monitor_logs())